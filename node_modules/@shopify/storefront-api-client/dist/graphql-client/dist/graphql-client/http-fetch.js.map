{"version":3,"file":"http-fetch.js","sources":["../../../../../graphql-client/dist/graphql-client/http-fetch.mjs"],"sourcesContent":["import { CLIENT, RETRY_WAIT_TIME, RETRIABLE_STATUS_CODES } from './constants.mjs';\nimport { formatErrorMessage, getErrorMessage } from './utilities.mjs';\n\nfunction generateHttpFetch({ clientLogger, customFetchApi = fetch, client = CLIENT, defaultRetryWaitTime = RETRY_WAIT_TIME, retriableCodes = RETRIABLE_STATUS_CODES, }) {\n    const httpFetch = async (requestParams, count, maxRetries) => {\n        const nextCount = count + 1;\n        const maxTries = maxRetries + 1;\n        let response;\n        try {\n            response = await customFetchApi(...requestParams);\n            clientLogger({\n                type: \"HTTP-Response\",\n                content: {\n                    requestParams,\n                    response,\n                },\n            });\n            if (!response.ok &&\n                retriableCodes.includes(response.status) &&\n                nextCount <= maxTries) {\n                throw new Error();\n            }\n            return response;\n        }\n        catch (error) {\n            if (nextCount <= maxTries) {\n                const retryAfter = response?.headers.get(\"Retry-After\");\n                await sleep(retryAfter ? parseInt(retryAfter, 10) : defaultRetryWaitTime);\n                clientLogger({\n                    type: \"HTTP-Retry\",\n                    content: {\n                        requestParams,\n                        lastResponse: response,\n                        retryAttempt: count,\n                        maxRetries,\n                    },\n                });\n                return httpFetch(requestParams, nextCount, maxRetries);\n            }\n            throw new Error(formatErrorMessage(`${maxRetries > 0\n                ? `Attempted maximum number of ${maxRetries} network retries. Last message - `\n                : \"\"}${getErrorMessage(error)}`, client));\n        }\n    };\n    return httpFetch;\n}\nasync function sleep(waitTime) {\n    return new Promise((resolve) => setTimeout(resolve, waitTime));\n}\n\nexport { generateHttpFetch };\n//# sourceMappingURL=http-fetch.mjs.map\n"],"names":["CLIENT","RETRY_WAIT_TIME","RETRIABLE_STATUS_CODES","formatErrorMessage","getErrorMessage"],"mappings":";;;;;AAGA,SAAS,iBAAiB,CAAC,EAAE,YAAY,EAAE,cAAc,GAAG,KAAK,EAAE,MAAM,GAAGA,gBAAM,EAAE,oBAAoB,GAAGC,yBAAe,EAAE,cAAc,GAAGC,gCAAsB,GAAG,EAAE;AACxK,IAAI,MAAM,SAAS,GAAG,OAAO,aAAa,EAAE,KAAK,EAAE,UAAU,KAAK;AAClE,QAAQ,MAAM,SAAS,GAAG,KAAK,GAAG,CAAC,CAAC;AACpC,QAAQ,MAAM,QAAQ,GAAG,UAAU,GAAG,CAAC,CAAC;AACxC,QAAQ,IAAI,QAAQ,CAAC;AACrB,QAAQ,IAAI;AACZ,YAAY,QAAQ,GAAG,MAAM,cAAc,CAAC,GAAG,aAAa,CAAC,CAAC;AAC9D,YAAY,YAAY,CAAC;AACzB,gBAAgB,IAAI,EAAE,eAAe;AACrC,gBAAgB,OAAO,EAAE;AACzB,oBAAoB,aAAa;AACjC,oBAAoB,QAAQ;AAC5B,iBAAiB;AACjB,aAAa,CAAC,CAAC;AACf,YAAY,IAAI,CAAC,QAAQ,CAAC,EAAE;AAC5B,gBAAgB,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;AACxD,gBAAgB,SAAS,IAAI,QAAQ,EAAE;AACvC,gBAAgB,MAAM,IAAI,KAAK,EAAE,CAAC;AAClC,aAAa;AACb,YAAY,OAAO,QAAQ,CAAC;AAC5B,SAAS;AACT,QAAQ,OAAO,KAAK,EAAE;AACtB,YAAY,IAAI,SAAS,IAAI,QAAQ,EAAE;AACvC,gBAAgB,MAAM,UAAU,GAAG,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AACxE,gBAAgB,MAAM,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,GAAG,oBAAoB,CAAC,CAAC;AAC1F,gBAAgB,YAAY,CAAC;AAC7B,oBAAoB,IAAI,EAAE,YAAY;AACtC,oBAAoB,OAAO,EAAE;AAC7B,wBAAwB,aAAa;AACrC,wBAAwB,YAAY,EAAE,QAAQ;AAC9C,wBAAwB,YAAY,EAAE,KAAK;AAC3C,wBAAwB,UAAU;AAClC,qBAAqB;AACrB,iBAAiB,CAAC,CAAC;AACnB,gBAAgB,OAAO,SAAS,CAAC,aAAa,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AACvE,aAAa;AACb,YAAY,MAAM,IAAI,KAAK,CAACC,4BAAkB,CAAC,CAAC,EAAE,UAAU,GAAG,CAAC;AAChE,kBAAkB,CAAC,4BAA4B,EAAE,UAAU,CAAC,iCAAiC,CAAC;AAC9F,kBAAkB,EAAE,CAAC,EAAEC,yBAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;AAC1D,SAAS;AACT,KAAK,CAAC;AACN,IAAI,OAAO,SAAS,CAAC;AACrB,CAAC;AACD,eAAe,KAAK,CAAC,QAAQ,EAAE;AAC/B,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;AACnE;;;;"}