{"version":3,"file":"graphql-client.js","sources":["../../../../../graphql-client/dist/graphql-client/graphql-client.mjs"],"sourcesContent":["import { generateHttpFetch } from './http-fetch.mjs';\nimport { CLIENT, SDK_VARIANT_HEADER, SDK_VERSION_HEADER, DEFAULT_SDK_VARIANT, DEFAULT_CLIENT_VERSION, DEFER_OPERATION_REGEX, CONTENT_TYPES, UNEXPECTED_CONTENT_TYPE_ERROR, GQL_API_ERROR, NO_DATA_OR_ERRORS_ERROR, BOUNDARY_HEADER_REGEX, RETRY_WAIT_TIME, HEADER_SEPARATOR } from './constants.mjs';\nimport { validateRetries, formatErrorMessage, getErrorMessage, getErrorCause, getKeyValueIfValid, combineErrors, buildCombinedDataObject, buildDataObjectByPath } from './utilities.mjs';\n\nfunction createGraphQLClient({ headers, url, customFetchApi = fetch, retries = 0, logger, }) {\n    validateRetries({ client: CLIENT, retries });\n    const config = {\n        headers,\n        url,\n        retries,\n    };\n    const clientLogger = generateClientLogger(logger);\n    const httpFetch = generateHttpFetch({\n        customFetchApi,\n        clientLogger,\n        defaultRetryWaitTime: RETRY_WAIT_TIME,\n    });\n    const fetch = generateFetch(httpFetch, config);\n    const request = generateRequest(fetch);\n    const requestStream = generateRequestStream(fetch);\n    return {\n        config,\n        fetch,\n        request,\n        requestStream,\n    };\n}\nfunction generateClientLogger(logger) {\n    return (logContent) => {\n        if (logger) {\n            logger(logContent);\n        }\n    };\n}\nasync function processJSONResponse(response) {\n    const { errors, data, extensions } = await response.json();\n    return {\n        ...getKeyValueIfValid(\"data\", data),\n        ...getKeyValueIfValid(\"extensions\", extensions),\n        ...(errors || !data\n            ? {\n                errors: {\n                    networkStatusCode: response.status,\n                    message: formatErrorMessage(errors ? GQL_API_ERROR : NO_DATA_OR_ERRORS_ERROR),\n                    ...getKeyValueIfValid(\"graphQLErrors\", errors),\n                    response,\n                },\n            }\n            : {}),\n    };\n}\nfunction generateFetch(httpFetch, { url, headers, retries }) {\n    return async (operation, options = {}) => {\n        const { variables, headers: overrideHeaders, url: overrideUrl, retries: overrideRetries, } = options;\n        const body = JSON.stringify({\n            query: operation,\n            variables,\n        });\n        validateRetries({ client: CLIENT, retries: overrideRetries });\n        const flatHeaders = Object.entries({\n            ...headers,\n            ...overrideHeaders,\n        }).reduce((headers, [key, value]) => {\n            headers[key] = Array.isArray(value) ? value.join(\", \") : value.toString();\n            return headers;\n        }, {});\n        if (!flatHeaders[SDK_VARIANT_HEADER] && !flatHeaders[SDK_VERSION_HEADER]) {\n            flatHeaders[SDK_VARIANT_HEADER] = DEFAULT_SDK_VARIANT;\n            flatHeaders[SDK_VERSION_HEADER] = DEFAULT_CLIENT_VERSION;\n        }\n        const fetchParams = [\n            overrideUrl ?? url,\n            {\n                method: \"POST\",\n                headers: flatHeaders,\n                body,\n            },\n        ];\n        return httpFetch(fetchParams, 1, overrideRetries ?? retries);\n    };\n}\nfunction generateRequest(fetch) {\n    return async (...props) => {\n        if (DEFER_OPERATION_REGEX.test(props[0])) {\n            throw new Error(formatErrorMessage(\"This operation will result in a streamable response - use requestStream() instead.\"));\n        }\n        try {\n            const response = await fetch(...props);\n            const { status, statusText } = response;\n            const contentType = response.headers.get(\"content-type\") || \"\";\n            if (!response.ok) {\n                return {\n                    errors: {\n                        networkStatusCode: status,\n                        message: formatErrorMessage(statusText),\n                        response,\n                    },\n                };\n            }\n            if (!contentType.includes(CONTENT_TYPES.json)) {\n                return {\n                    errors: {\n                        networkStatusCode: status,\n                        message: formatErrorMessage(`${UNEXPECTED_CONTENT_TYPE_ERROR} ${contentType}`),\n                        response,\n                    },\n                };\n            }\n            return processJSONResponse(response);\n        }\n        catch (error) {\n            return {\n                errors: {\n                    message: getErrorMessage(error),\n                },\n            };\n        }\n    };\n}\nasync function* getStreamBodyIterator(response) {\n    const decoder = new TextDecoder();\n    // Response body is an async iterator\n    if (response.body[Symbol.asyncIterator]) {\n        for await (const chunk of response.body) {\n            yield decoder.decode(chunk);\n        }\n    }\n    else {\n        const reader = response.body.getReader();\n        let readResult;\n        try {\n            while (!(readResult = await reader.read()).done) {\n                yield decoder.decode(readResult.value);\n            }\n        }\n        finally {\n            reader.cancel();\n        }\n    }\n}\nfunction readStreamChunk(streamBodyIterator, boundary) {\n    return {\n        async *[Symbol.asyncIterator]() {\n            try {\n                let buffer = \"\";\n                for await (const textChunk of streamBodyIterator) {\n                    buffer += textChunk;\n                    if (buffer.indexOf(boundary) > -1) {\n                        const lastBoundaryIndex = buffer.lastIndexOf(boundary);\n                        const fullResponses = buffer.slice(0, lastBoundaryIndex);\n                        const chunkBodies = fullResponses\n                            .split(boundary)\n                            .filter((chunk) => chunk.trim().length > 0)\n                            .map((chunk) => {\n                            const body = chunk\n                                .slice(chunk.indexOf(HEADER_SEPARATOR) + HEADER_SEPARATOR.length)\n                                .trim();\n                            return body;\n                        });\n                        if (chunkBodies.length > 0) {\n                            yield chunkBodies;\n                        }\n                        buffer = buffer.slice(lastBoundaryIndex + boundary.length);\n                        if (buffer.trim() === `--`) {\n                            buffer = \"\";\n                        }\n                    }\n                }\n            }\n            catch (error) {\n                throw new Error(`Error occured while processing stream payload - ${getErrorMessage(error)}`);\n            }\n        },\n    };\n}\nfunction createJsonResponseAsyncIterator(response) {\n    return {\n        async *[Symbol.asyncIterator]() {\n            const processedResponse = await processJSONResponse(response);\n            yield {\n                ...processedResponse,\n                hasNext: false,\n            };\n        },\n    };\n}\nfunction getResponseDataFromChunkBodies(chunkBodies) {\n    return chunkBodies\n        .map((value) => {\n        try {\n            return JSON.parse(value);\n        }\n        catch (error) {\n            throw new Error(`Error in parsing multipart response - ${getErrorMessage(error)}`);\n        }\n    })\n        .map((payload) => {\n        const { data, incremental, hasNext, extensions, errors } = payload;\n        // initial data chunk\n        if (!incremental) {\n            return {\n                data: data || {},\n                ...getKeyValueIfValid(\"errors\", errors),\n                ...getKeyValueIfValid(\"extensions\", extensions),\n                hasNext,\n            };\n        }\n        // subsequent data chunks\n        const incrementalArray = incremental.map(({ data, path, errors }) => {\n            return {\n                data: data && path ? buildDataObjectByPath(path, data) : {},\n                ...getKeyValueIfValid(\"errors\", errors),\n            };\n        });\n        return {\n            data: incrementalArray.length === 1\n                ? incrementalArray[0].data\n                : buildCombinedDataObject([\n                    ...incrementalArray.map(({ data }) => data),\n                ]),\n            ...getKeyValueIfValid(\"errors\", combineErrors(incrementalArray)),\n            hasNext,\n        };\n    });\n}\nfunction validateResponseData(responseErrors, combinedData) {\n    if (responseErrors.length > 0) {\n        throw new Error(GQL_API_ERROR, {\n            cause: {\n                graphQLErrors: responseErrors,\n            },\n        });\n    }\n    if (Object.keys(combinedData).length === 0) {\n        throw new Error(NO_DATA_OR_ERRORS_ERROR);\n    }\n}\nfunction createMultipartResponseAsyncInterator(response, responseContentType) {\n    const boundaryHeader = (responseContentType ?? \"\").match(BOUNDARY_HEADER_REGEX);\n    const boundary = `--${boundaryHeader ? boundaryHeader[1] : \"-\"}`;\n    if (!response.body?.getReader &&\n        !response.body[Symbol.asyncIterator]) {\n        throw new Error(\"API multipart response did not return an iterable body\", {\n            cause: response,\n        });\n    }\n    const streamBodyIterator = getStreamBodyIterator(response);\n    let combinedData = {};\n    let responseExtensions;\n    return {\n        async *[Symbol.asyncIterator]() {\n            try {\n                let streamHasNext = true;\n                for await (const chunkBodies of readStreamChunk(streamBodyIterator, boundary)) {\n                    const responseData = getResponseDataFromChunkBodies(chunkBodies);\n                    responseExtensions =\n                        responseData.find((datum) => datum.extensions)?.extensions ??\n                            responseExtensions;\n                    const responseErrors = combineErrors(responseData);\n                    combinedData = buildCombinedDataObject([\n                        combinedData,\n                        ...responseData.map(({ data }) => data),\n                    ]);\n                    streamHasNext = responseData.slice(-1)[0].hasNext;\n                    validateResponseData(responseErrors, combinedData);\n                    yield {\n                        ...getKeyValueIfValid(\"data\", combinedData),\n                        ...getKeyValueIfValid(\"extensions\", responseExtensions),\n                        hasNext: streamHasNext,\n                    };\n                }\n                if (streamHasNext) {\n                    throw new Error(`Response stream terminated unexpectedly`);\n                }\n            }\n            catch (error) {\n                const cause = getErrorCause(error);\n                yield {\n                    ...getKeyValueIfValid(\"data\", combinedData),\n                    ...getKeyValueIfValid(\"extensions\", responseExtensions),\n                    errors: {\n                        message: formatErrorMessage(getErrorMessage(error)),\n                        networkStatusCode: response.status,\n                        ...getKeyValueIfValid(\"graphQLErrors\", cause?.graphQLErrors),\n                        response,\n                    },\n                    hasNext: false,\n                };\n            }\n        },\n    };\n}\nfunction generateRequestStream(fetch) {\n    return async (...props) => {\n        if (!DEFER_OPERATION_REGEX.test(props[0])) {\n            throw new Error(formatErrorMessage(\"This operation does not result in a streamable response - use request() instead.\"));\n        }\n        try {\n            const response = await fetch(...props);\n            const { statusText } = response;\n            if (!response.ok) {\n                throw new Error(statusText, { cause: response });\n            }\n            const responseContentType = response.headers.get(\"content-type\") || \"\";\n            switch (true) {\n                case responseContentType.includes(CONTENT_TYPES.json):\n                    return createJsonResponseAsyncIterator(response);\n                case responseContentType.includes(CONTENT_TYPES.multipart):\n                    return createMultipartResponseAsyncInterator(response, responseContentType);\n                default:\n                    throw new Error(`${UNEXPECTED_CONTENT_TYPE_ERROR} ${responseContentType}`, { cause: response });\n            }\n        }\n        catch (error) {\n            return {\n                async *[Symbol.asyncIterator]() {\n                    const response = getErrorCause(error);\n                    yield {\n                        errors: {\n                            message: formatErrorMessage(getErrorMessage(error)),\n                            ...getKeyValueIfValid(\"networkStatusCode\", response?.status),\n                            ...getKeyValueIfValid(\"response\", response),\n                        },\n                        hasNext: false,\n                    };\n                },\n            };\n        }\n    };\n}\n\nexport { createGraphQLClient, generateClientLogger };\n//# sourceMappingURL=graphql-client.mjs.map\n"],"names":["validateRetries","CLIENT","httpFetch","generateHttpFetch","RETRY_WAIT_TIME","getKeyValueIfValid","formatErrorMessage","GQL_API_ERROR","NO_DATA_OR_ERRORS_ERROR","SDK_VARIANT_HEADER","SDK_VERSION_HEADER","DEFAULT_SDK_VARIANT","DEFAULT_CLIENT_VERSION","DEFER_OPERATION_REGEX","CONTENT_TYPES","UNEXPECTED_CONTENT_TYPE_ERROR","getErrorMessage","HEADER_SEPARATOR","buildDataObjectByPath","buildCombinedDataObject","combineErrors","BOUNDARY_HEADER_REGEX","getErrorCause"],"mappings":"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"}